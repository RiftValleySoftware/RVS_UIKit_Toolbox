{"Extensions/UIColor.html#/s:So7UIColorC17RVS_UIKit_ToolboxE3hexABSgSS_tcfc":{"name":"init(hex:)","abstract":"<p><a href=\"https://www.hackingwithswift.com/example-code/uicolor/how-to-convert-a-hex-color-to-a-uicolor\">This comes fairly directly from this Hacking With Swift tutorial</a></p>","parent_name":"UIColor"},"Extensions/UIColor.html#/s:So7UIColorC17RVS_UIKit_ToolboxE8hexValueSSvp":{"name":"hexValue","parent_name":"UIColor"},"Extensions/UIColor.html#/s:So7UIColorC17RVS_UIKit_ToolboxE7isClearSbvp":{"name":"isClear","parent_name":"UIColor"},"Extensions/UIColor.html#/s:So7UIColorC17RVS_UIKit_ToolboxE12isMonochromeSbvp":{"name":"isMonochrome","parent_name":"UIColor"},"Extensions/UIColor.html#/s:So7UIColorC17RVS_UIKit_ToolboxE4rgba14CoreFoundation7CGFloatV1r_AG1gAG1bAG1atvp":{"name":"rgba","abstract":"<p>This just allows us to get an RGB color from a standard UIColor.</p>","parent_name":"UIColor"},"Extensions/UIColor.html#/s:So7UIColorC17RVS_UIKit_ToolboxE4hsba14CoreFoundation7CGFloatV1h_AG1sAG1bAG1atvp":{"name":"hsba","abstract":"<p>This just allows us to get an HSB color from a standard UIColor.","parent_name":"UIColor"},"Extensions/UIColor.html#/s:So7UIColorC17RVS_UIKit_ToolboxE8invertedABvp":{"name":"inverted","abstract":"<p>Returns the inverted color.","parent_name":"UIColor"},"Extensions/UIColor.html#/s:So7UIColorC17RVS_UIKit_ToolboxE17intermediateColor05otherF011samplePoint5isHSLA2B_14CoreFoundation7CGFloatVSbtF":{"name":"intermediateColor(otherColor:samplePoint:isHSL:)","abstract":"<p>This will return an intermediate color, between this color, and another one.</p>","parent_name":"UIColor"},"Extensions/UIImage.html#/s:So7UIImageC17RVS_UIKit_ToolboxE5color4sizeABSgSo7UIColorC_So6CGSizeVtcfc":{"name":"init(color:size:)","abstract":"<p>This convenience initializer allows us to create a solid rectangular image, of just one color.</p>","parent_name":"UIImage"},"Extensions/UIImage.html#/s:So7UIImageC17RVS_UIKit_ToolboxE18assetOrSystemImage4nameABSgSS_tFZ":{"name":"assetOrSystemImage(name:)","abstract":"<p>This is a &ldquo;cascading&rdquo; image fetcher. It first, ses if there is an asset with the name given, then, it looks in the SFSymbols, finally, returning the SFSymbols.nosign, if none found.</p>","parent_name":"UIImage"},"Extensions/UIImage.html#/s:So7UIImageC17RVS_UIKit_ToolboxE19hasAlphaInformationSbvp":{"name":"hasAlphaInformation","parent_name":"UIImage"},"Extensions/UIImage.html#/s:So7UIImageC17RVS_UIKit_ToolboxE21getRGBColorOfThePixel2atSo7UIColorCSgSo7CGPointV_tF":{"name":"getRGBColorOfThePixel(at:)","abstract":"<p>This returns the RGB color (as a UIColor) of the pixel in the image, at the given point. It is restricted to 32-bit (RGBA/8-bit pixel) values.</p>","parent_name":"UIImage"},"Extensions/UIImage.html#/s:So7UIImageC17RVS_UIKit_ToolboxE7resized13toMaximumSizeABSg14CoreFoundation7CGFloatV_tF":{"name":"resized(toMaximumSize:)","abstract":"<p>This allows an image to be resized, given a maximum dimension, and a scale will be determined to meet that dimension.","parent_name":"UIImage"},"Extensions/UIImage.html#/s:So7UIImageC17RVS_UIKit_ToolboxE7resized13toScaleFactorABSg14CoreFoundation7CGFloatV_tF":{"name":"resized(toScaleFactor:)","abstract":"<p>This allows an image to be resized, given a maximum dimension, and a scale will be determined to meet that dimension.</p>","parent_name":"UIImage"},"Extensions/UIImage.html#/s:So7UIImageC17RVS_UIKit_ToolboxE7resized10toNewWidth0fG6HeightABSg14CoreFoundation7CGFloatVSg_AKtF":{"name":"resized(toNewWidth:toNewHeight:)","abstract":"<p>This allows an image to be resized, given both a width and a height, or just one of the dimensions.</p>","parent_name":"UIImage"},"Extensions/UIView.html#/c:@CM@RVS_UIKit_Toolbox@@objc(cs)UIView(py)cornerRadius":{"name":"cornerRadius","abstract":"<p>This gives us access to the corner radius, so we can give the view rounded corners.</p>","parent_name":"UIView"},"Extensions/UIView.html#/c:@CM@RVS_UIKit_Toolbox@@objc(cs)UIView(py)borderWidth":{"name":"borderWidth","abstract":"<p>Inspired by <a href=\"https://stackoverflow.com/a/45089222/879365\">this SO answer</a>","parent_name":"UIView"},"Extensions/UIView.html#/c:@CM@RVS_UIKit_Toolbox@@objc(cs)UIView(py)borderColor":{"name":"borderColor","abstract":"<p>Inspired by <a href=\"https://stackoverflow.com/a/45089222/879365\">this SO answer</a>","parent_name":"UIView"},"Extensions/UIView.html#/s:So6UIViewC17RVS_UIKit_ToolboxE21currentFirstResponderSo11UIResponderCSgvp":{"name":"currentFirstResponder","abstract":"<p>This returns the first responder, wherever it is in our hierarchy.</p>","parent_name":"UIView"},"Extensions/UIView.html#/s:So6UIViewC17RVS_UIKit_ToolboxE24resignAllFirstRespondersyyF":{"name":"resignAllFirstResponders()","abstract":"<p>This puts away any open keyboards.</p>","parent_name":"UIView"},"Extensions/UIView.html#/s:So6UIViewC17RVS_UIKit_ToolboxE16addContainedView_9underThis20andGiveMeABottomHookSo19NSLayoutYAxisAnchorCSgAB_AISbtF":{"name":"addContainedView(_:underThis:andGiveMeABottomHook:)","abstract":"<p>This allows us to add a subview, and set it up with auto-layout constraints to fill the superview.</p>","parent_name":"UIView"},"Extensions/UIView.html#/s:So6UIViewC17RVS_UIKit_ToolboxE26autoLayoutAspectConstraint11aspectRatioSo08NSLayoutH0CSg14CoreFoundation7CGFloatV_tF":{"name":"autoLayoutAspectConstraint(aspectRatio:)","abstract":"<p>This creates a constraint, locking the view to a given aspect ratio.</p>","parent_name":"UIView"},"Extensions/UIViewController.html#/s:So16UIViewControllerC17RVS_UIKit_ToolboxE13biometricTypeSo010LABiometryG0VvpZ":{"name":"biometricType","abstract":"<p>Get the biometric authentication type.</p>","parent_name":"UIViewController"},"Extensions/UIViewController.html#/s:So16UIViewControllerC17RVS_UIKit_ToolboxE18isHighContrastModeSbvpZ":{"name":"isHighContrastMode","abstract":"<p>Returns true, if we are in High Contrast Mode.</p>","parent_name":"UIViewController"},"Extensions/UIViewController.html#/s:So16UIViewControllerC17RVS_UIKit_ToolboxE25isReducedTransparencyModeSbvpZ":{"name":"isReducedTransparencyMode","abstract":"<p>Returns true, if we are in Reduced Transparency Mode.</p>","parent_name":"UIViewController"},"Extensions/UIViewController.html#/s:So16UIViewControllerC17RVS_UIKit_ToolboxE18isVoiceOverRunningSbvpZ":{"name":"isVoiceOverRunning","abstract":"<p>Returns true, if voiceover mode is on.</p>","parent_name":"UIViewController"},"Extensions/UIViewController.html#/s:So16UIViewControllerC17RVS_UIKit_ToolboxE17isICloudAvailableSbvpZ":{"name":"isICloudAvailable","abstract":"<p>Returns true, if iCloud is available, and logged-in.</p>","parent_name":"UIViewController"},"Extensions/UIViewController.html#/s:So16UIViewControllerC17RVS_UIKit_ToolboxE12screenAspect14CoreFoundation7CGFloatVvpZ":{"name":"screenAspect","abstract":"<p>Returns the X/Y aspect of the screen (window).</p>","parent_name":"UIViewController"},"Extensions/UIViewController.html#/s:So16UIViewControllerC17RVS_UIKit_ToolboxE13biometricTypeSo010LABiometryG0Vvp":{"name":"biometricType","abstract":"<p>Get the biometric authentication type.</p>","parent_name":"UIViewController"},"Extensions/UIViewController.html#/s:So16UIViewControllerC17RVS_UIKit_ToolboxE18isHighContrastModeSbvp":{"name":"isHighContrastMode","abstract":"<p>Returns true, if we are in High Contrast Mode.</p>","parent_name":"UIViewController"},"Extensions/UIViewController.html#/s:So16UIViewControllerC17RVS_UIKit_ToolboxE25isReducedTransparencyModeSbvp":{"name":"isReducedTransparencyMode","abstract":"<p>Returns true, if we are in Reduced Transparency Mode.</p>","parent_name":"UIViewController"},"Extensions/UIViewController.html#/s:So16UIViewControllerC17RVS_UIKit_ToolboxE18isVoiceOverRunningSbvp":{"name":"isVoiceOverRunning","abstract":"<p>Returns true, if voiceover mode is on.</p>","parent_name":"UIViewController"},"Extensions/UIViewController.html#/s:So16UIViewControllerC17RVS_UIKit_ToolboxE17isICloudAvailableSbvp":{"name":"isICloudAvailable","abstract":"<p>Returns true, if iCloud is available, and logged-in.</p>","parent_name":"UIViewController"},"Extensions/UIViewController.html#/s:So16UIViewControllerC17RVS_UIKit_ToolboxE10isDarkModeSbvp":{"name":"isDarkMode","abstract":"<p>Returns true, if we are in Dark Mode.</p>","parent_name":"UIViewController"},"Extensions/UIViewController.html#/s:So16UIViewControllerC17RVS_UIKit_ToolboxE19hapticsAreAvailableSbvp":{"name":"hapticsAreAvailable","abstract":"<p>Returns true, if haptics are available.</p>","parent_name":"UIViewController"},"Extensions/UIViewController.html#/s:So16UIViewControllerC17RVS_UIKit_ToolboxE12screenAspect14CoreFoundation7CGFloatVvp":{"name":"screenAspect","abstract":"<p>Returns the X/Y aspect of the screen (window).</p>","parent_name":"UIViewController"},"Extensions/UIViewController.html#/s:So16UIViewControllerC17RVS_UIKit_ToolboxE012previousViewB0ABSgvp":{"name":"previousViewController","abstract":"<p>Returns the previous ViewController in a navigation stack.","parent_name":"UIViewController"},"Extensions/UIViewController.html#/s:So16UIViewControllerC17RVS_UIKit_ToolboxE21currentFirstResponderSo11UIResponderCSgvp":{"name":"currentFirstResponder","abstract":"<p>This returns the first responder, wherever it is in our hierarchy.</p>","parent_name":"UIViewController"},"Extensions/UIViewController.html#/s:So16UIViewControllerC17RVS_UIKit_ToolboxE24resignAllFirstRespondersyyF":{"name":"resignAllFirstResponders()","abstract":"<p>This puts away any open keyboards.","parent_name":"UIViewController"},"Extensions/UITabBarController.html#/s:So18UITabBarControllerC17RVS_UIKit_ToolboxE11setColorsTo6normal8selected10backgroundySo7UIColorCSg_A2JtF":{"name":"setColorsTo(normal:selected:background:)","abstract":"<p>This allows us to set specific colors for the normal, selected, and background attributes of the tab bar.","parent_name":"UITabBarController"},"Extensions/UITabBarController.html":{"name":"UITabBarController","abstract":"<p>An extension to <a href=\"https://developer.apple.com/documentation/uikit/uitabbarcontroller\">the standard UITabBarController class</a>."},"Extensions/UIViewController.html":{"name":"UIViewController","abstract":"<p>A set of various extensions of <a href=\"https://developer.apple.com/documentation/uikit/uiviewcontroller\">the UIViewController class</a>."},"Extensions/UIView.html":{"name":"UIView","abstract":"<p>A set of extensions to <a href=\"https://developer.apple.com/documentation/uikit/uiview\">the UIView class</a>."},"Extensions/UIImage.html":{"name":"UIImage","abstract":"<p>A set of extensions to <a href=\"https://developer.apple.com/documentation/uikit/uiimage\">the UIImage class</a>."},"Extensions/UIColor.html":{"name":"UIColor","abstract":"<p>A set of extensions to <a href=\"https://developer.apple.com/documentation/uikit/uicolor\">the UIColor class</a>."},"Classes/RVS_PlaceholderTextView.html#/c:@M@RVS_UIKit_Toolbox@objc(cs)RVS_PlaceholderTextView(py)placeholder":{"name":"placeholder","abstract":"<p>This is the string that is displayed in the placeholder label. Default is empty.</p>","parent_name":"RVS_PlaceholderTextView"},"Classes/RVS_PlaceholderTextView.html#/c:@M@RVS_UIKit_Toolbox@objc(cs)RVS_PlaceholderTextView(py)useSystemFont":{"name":"useSystemFont","abstract":"<p>If this is true, then the placeholder is displayed in the system font (sized for the view font). Default is true.</p>","parent_name":"RVS_PlaceholderTextView"},"Classes/RVS_PlaceholderTextView.html#/c:@CM@RVS_UIKit_Toolbox@objc(cs)RVS_PlaceholderTextView(im)layoutSubviews":{"name":"layoutSubviews()","abstract":"<p>When we do our layout, we add the placeholder view.</p>","parent_name":"RVS_PlaceholderTextView"},"Classes/RVS_PlaceholderTextView.html":{"name":"RVS_PlaceholderTextView","abstract":"<p>This is a subclass of the standard <a href=\"https://developer.apple.com/documentation/uikit/uitextview\"><code>UITextView</code></a> class.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"}}